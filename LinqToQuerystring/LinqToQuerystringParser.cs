//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2013-06-17 16:26:40

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALIAS", "ALL", "ALLPAGES", "AND", "ANY", "ASC", "ASSIGN", "AVERAGE", "BOOL", "BYTE", "COUNT", "DATETIME", "DESC", "DOUBLE", "DYNAMICIDENTIFIER", "ENDSWITH", "EQUALS", "ESC_SEQ", "EXPAND", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "GUID", "HEX_DIGIT", "HEX_PAIR", "IDENTIFIER", "INLINECOUNT", "INT", "LESSTHAN", "LESSTHANOREQUAL", "LONG", "MAX", "MIN", "NEWLINE", "NONE", "NOT", "NOTEQUALS", "OCTAL_ESC", "OR", "ORDERBY", "SELECT", "SINGLE", "SKIP", "SPACE", "STARTSWITH", "STRING", "SUBSTRINGOF", "SUM", "TOLOWER", "TOP", "UNICODE_ESC", "'&'", "'('", "')'", "','", "'/'", "':'"
	};
	public const int EOF=-1;
	public const int ALIAS=4;
	public const int ALL=5;
	public const int ALLPAGES=6;
	public const int AND=7;
	public const int ANY=8;
	public const int ASC=9;
	public const int ASSIGN=10;
	public const int AVERAGE=11;
	public const int BOOL=12;
	public const int BYTE=13;
	public const int COUNT=14;
	public const int DATETIME=15;
	public const int DESC=16;
	public const int DOUBLE=17;
	public const int DYNAMICIDENTIFIER=18;
	public const int ENDSWITH=19;
	public const int EQUALS=20;
	public const int ESC_SEQ=21;
	public const int EXPAND=22;
	public const int FILTER=23;
	public const int GREATERTHAN=24;
	public const int GREATERTHANOREQUAL=25;
	public const int GUID=26;
	public const int HEX_DIGIT=27;
	public const int HEX_PAIR=28;
	public const int IDENTIFIER=29;
	public const int INLINECOUNT=30;
	public const int INT=31;
	public const int LESSTHAN=32;
	public const int LESSTHANOREQUAL=33;
	public const int LONG=34;
	public const int MAX=35;
	public const int MIN=36;
	public const int NEWLINE=37;
	public const int NONE=38;
	public const int NOT=39;
	public const int NOTEQUALS=40;
	public const int OCTAL_ESC=41;
	public const int OR=42;
	public const int ORDERBY=43;
	public const int SELECT=44;
	public const int SINGLE=45;
	public const int SKIP=46;
	public const int SPACE=47;
	public const int STARTSWITH=48;
	public const int STRING=49;
	public const int SUBSTRINGOF=50;
	public const int SUM=51;
	public const int TOLOWER=52;
	public const int TOP=53;
	public const int UNICODE_ESC=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:33:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(33, 25);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>=EXPAND && LA2_1<=FILTER)||LA2_1==INLINECOUNT||(LA2_1>=ORDERBY && LA2_1<=SELECT)||LA2_1==SKIP||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:5: param ( '&' ! param )*
					{
					DebugLocation(34, 5);
					PushFollow(Follow._param_in_prog76);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(34, 11);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==55))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:12: '&' ! param
							{
							DebugLocation(34, 15);
							char_literal2=(IToken)Match(input,55,Follow._55_in_prog79); 
							DebugLocation(34, 17);
							PushFollow(Follow._param_in_prog82);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(34, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:1: param : ( orderby | top | skip | filter | select | inlinecount | expand ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> select8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inlinecount9 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expand10 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(36, 71);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:7: ( ( orderby | top | skip | filter | select | inlinecount | expand ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:9: ( orderby | top | skip | filter | select | inlinecount | expand )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(36, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:9: ( orderby | top | skip | filter | select | inlinecount | expand )
			int alt3=7;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			case SELECT:
				{
				alt3 = 5;
				}
				break;
			case INLINECOUNT:
				{
				alt3 = 6;
				}
				break;
			case EXPAND:
				{
				alt3 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:10: orderby
				{
				DebugLocation(36, 10);
				PushFollow(Follow._orderby_in_param95);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:20: top
				{
				DebugLocation(36, 20);
				PushFollow(Follow._top_in_param99);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:26: skip
				{
				DebugLocation(36, 26);
				PushFollow(Follow._skip_in_param103);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:33: filter
				{
				DebugLocation(36, 33);
				PushFollow(Follow._filter_in_param107);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:42: select
				{
				DebugLocation(36, 42);
				PushFollow(Follow._select_in_param111);
				select8=select();
				PopFollow();

				adaptor.AddChild(root_0, select8.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:51: inlinecount
				{
				DebugLocation(36, 51);
				PushFollow(Follow._inlinecount_in_param115);
				inlinecount9=inlinecount();
				PopFollow();

				adaptor.AddChild(root_0, inlinecount9.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:65: expand
				{
				DebugLocation(36, 65);
				PushFollow(Follow._expand_in_param119);
				expand10=expand();
				PopFollow();

				adaptor.AddChild(root_0, expand10.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(36, 71);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP11 = default(IToken);
		IToken INT12 = default(IToken);

		object SKIP11_tree = default(object);
		object INT12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(38, 13);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(39, 8);
			SKIP11=(IToken)Match(input,SKIP,Follow._SKIP_in_skip130); 
			SKIP11_tree = (object)adaptor.Create(SKIP11);
			root_0 = (object)adaptor.BecomeRoot(SKIP11_tree, root_0);
			DebugLocation(39, 10);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:10: INT
					{
					DebugLocation(39, 10);
					INT12=(IToken)Match(input,INT,Follow._INT_in_skip133); 
					INT12_tree = (object)adaptor.Create(INT12);
					adaptor.AddChild(root_0, INT12_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(39, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP13 = default(IToken);
		IToken INT14 = default(IToken);

		object TOP13_tree = default(object);
		object INT14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(41, 12);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(42, 7);
			TOP13=(IToken)Match(input,TOP,Follow._TOP_in_top144); 
			TOP13_tree = (object)adaptor.Create(TOP13);
			root_0 = (object)adaptor.BecomeRoot(TOP13_tree, root_0);
			DebugLocation(42, 9);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:9: INT
					{
					DebugLocation(42, 9);
					INT14=(IToken)Match(input,INT,Follow._INT_in_top147); 
					INT14_tree = (object)adaptor.Create(INT14);
					adaptor.AddChild(root_0, INT14_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(42, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:1: filter : FILTER ^ filterexpression[false] ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER15 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression16 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER15_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(44, 34);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:2: ( FILTER ^ filterexpression[false] )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:4: FILTER ^ filterexpression[false]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(45, 10);
			FILTER15=(IToken)Match(input,FILTER,Follow._FILTER_in_filter158); 
			FILTER15_tree = (object)adaptor.Create(FILTER15);
			root_0 = (object)adaptor.BecomeRoot(FILTER15_tree, root_0);
			DebugLocation(45, 12);
			PushFollow(Follow._filterexpression_in_filter161);
			filterexpression16=filterexpression(false);
			PopFollow();

			adaptor.AddChild(root_0, filterexpression16.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(45, 34);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_select();
	partial void LeaveRule_select();
	// $ANTLR start "select"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:1: select : SELECT ^ propertyname[false] ( ',' ! propertyname[false] )* ;
	[GrammarRule("select")]
	private AstParserRuleReturnScope<object, IToken> select()
	{
		EnterRule_select();
		EnterRule("select", 6);
		TraceIn("select", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT17 = default(IToken);
		IToken char_literal19 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname18 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname20 = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT17_tree = default(object);
		object char_literal19_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(47, 58);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:2: ( SELECT ^ propertyname[false] ( ',' ! propertyname[false] )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:4: SELECT ^ propertyname[false] ( ',' ! propertyname[false] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 10);
			SELECT17=(IToken)Match(input,SELECT,Follow._SELECT_in_select172); 
			SELECT17_tree = (object)adaptor.Create(SELECT17);
			root_0 = (object)adaptor.BecomeRoot(SELECT17_tree, root_0);
			DebugLocation(48, 12);
			PushFollow(Follow._propertyname_in_select175);
			propertyname18=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname18.Tree);
			DebugLocation(48, 32);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:32: ( ',' ! propertyname[false] )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==58))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:33: ',' ! propertyname[false]
					{
					DebugLocation(48, 36);
					char_literal19=(IToken)Match(input,58,Follow._58_in_select179); 
					DebugLocation(48, 38);
					PushFollow(Follow._propertyname_in_select182);
					propertyname20=propertyname(false);
					PopFollow();

					adaptor.AddChild(root_0, propertyname20.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 6);
			LeaveRule("select", 6);
			LeaveRule_select();
		}
		DebugLocation(48, 58);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	partial void EnterRule_expand();
	partial void LeaveRule_expand();
	// $ANTLR start "expand"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:1: expand : EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )* ;
	[GrammarRule("expand")]
	private AstParserRuleReturnScope<object, IToken> expand()
	{
		EnterRule_expand();
		EnterRule("expand", 7);
		TraceIn("expand", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EXPAND21 = default(IToken);
		IToken char_literal23 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname22 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname24 = default(AstParserRuleReturnScope<object, IToken>);

		object EXPAND21_tree = default(object);
		object char_literal23_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expand");
		DebugLocation(50, 58);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:2: ( EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:4: EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(51, 10);
			EXPAND21=(IToken)Match(input,EXPAND,Follow._EXPAND_in_expand197); 
			EXPAND21_tree = (object)adaptor.Create(EXPAND21);
			root_0 = (object)adaptor.BecomeRoot(EXPAND21_tree, root_0);
			DebugLocation(51, 12);
			PushFollow(Follow._propertyname_in_expand200);
			propertyname22=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname22.Tree);
			DebugLocation(51, 32);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:32: ( ',' ! propertyname[false] )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==58))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:33: ',' ! propertyname[false]
					{
					DebugLocation(51, 36);
					char_literal23=(IToken)Match(input,58,Follow._58_in_expand204); 
					DebugLocation(51, 38);
					PushFollow(Follow._propertyname_in_expand207);
					propertyname24=propertyname(false);
					PopFollow();

					adaptor.AddChild(root_0, propertyname24.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expand", 7);
			LeaveRule("expand", 7);
			LeaveRule_expand();
		}
		DebugLocation(51, 58);
		} finally { DebugExitRule(GrammarFileName, "expand"); }
		return retval;

	}
	// $ANTLR end "expand"

	partial void EnterRule_inlinecount();
	partial void LeaveRule_inlinecount();
	// $ANTLR start "inlinecount"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:53:1: inlinecount : ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->);
	[GrammarRule("inlinecount")]
	private AstParserRuleReturnScope<object, IToken> inlinecount()
	{
		EnterRule_inlinecount();
		EnterRule("inlinecount", 8);
		TraceIn("inlinecount", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INLINECOUNT25 = default(IToken);
		IToken ALLPAGES26 = default(IToken);
		IToken INLINECOUNT27 = default(IToken);
		IToken NONE28 = default(IToken);

		object INLINECOUNT25_tree = default(object);
		object ALLPAGES26_tree = default(object);
		object INLINECOUNT27_tree = default(object);
		object NONE28_tree = default(object);
		RewriteRuleITokenStream stream_INLINECOUNT=new RewriteRuleITokenStream(adaptor,"token INLINECOUNT");
		RewriteRuleITokenStream stream_NONE=new RewriteRuleITokenStream(adaptor,"token NONE");
		try { DebugEnterRule(GrammarFileName, "inlinecount");
		DebugLocation(53, 22);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:2: ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->)
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==INLINECOUNT))
			{
				int LA8_2 = input.LA(2);

				if ((LA8_2==ALLPAGES))
				{
					alt8 = 1;
				}
				else if ((LA8_2==NONE))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:4: INLINECOUNT ^ ALLPAGES
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(54, 15);
				INLINECOUNT25=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount220); 
				INLINECOUNT25_tree = (object)adaptor.Create(INLINECOUNT25);
				root_0 = (object)adaptor.BecomeRoot(INLINECOUNT25_tree, root_0);
				DebugLocation(54, 17);
				ALLPAGES26=(IToken)Match(input,ALLPAGES,Follow._ALLPAGES_in_inlinecount223); 
				ALLPAGES26_tree = (object)adaptor.Create(ALLPAGES26);
				adaptor.AddChild(root_0, ALLPAGES26_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:55:4: INLINECOUNT NONE
				{
				DebugLocation(55, 4);
				INLINECOUNT27=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount228);  
				stream_INLINECOUNT.Add(INLINECOUNT27);

				DebugLocation(55, 16);
				NONE28=(IToken)Match(input,NONE,Follow._NONE_in_inlinecount230);  
				stream_NONE.Add(NONE28);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 55:21: ->
				{
					DebugLocation(55, 23);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inlinecount", 8);
			LeaveRule("inlinecount", 8);
			LeaveRule_inlinecount();
		}
		DebugLocation(55, 22);
		} finally { DebugExitRule(GrammarFileName, "inlinecount"); }
		return retval;

	}
	// $ANTLR end "inlinecount"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:1: filterexpression[bool subquery] : orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression(bool subquery)
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 9);
		TraceIn("filterexpression", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE30 = default(IToken);
		IToken OR31 = default(IToken);
		IToken SPACE32 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression29 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression33 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE30_tree = default(object);
		object OR31_tree = default(object);
		object SPACE32_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(57, 69);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:2: ( orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:4: orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 4);
			PushFollow(Follow._orexpression_in_filterexpression242);
			orexpression29=orexpression(subquery);
			PopFollow();

			adaptor.AddChild(root_0, orexpression29.Tree);
			DebugLocation(58, 27);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:27: ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==SPACE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:58:28: SPACE ! OR ^ SPACE ! orexpression[subquery]
					{
					DebugLocation(58, 33);
					SPACE30=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression246); 
					DebugLocation(58, 37);
					OR31=(IToken)Match(input,OR,Follow._OR_in_filterexpression249); 
					OR31_tree = (object)adaptor.Create(OR31);
					root_0 = (object)adaptor.BecomeRoot(OR31_tree, root_0);
					DebugLocation(58, 44);
					SPACE32=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression252); 
					DebugLocation(58, 46);
					PushFollow(Follow._orexpression_in_filterexpression255);
					orexpression33=orexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, orexpression33.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 9);
			LeaveRule("filterexpression", 9);
			LeaveRule_filterexpression();
		}
		DebugLocation(58, 69);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:60:1: orexpression[bool subquery] : andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression(bool subquery)
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 10);
		TraceIn("orexpression", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE35 = default(IToken);
		IToken AND36 = default(IToken);
		IToken SPACE37 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression34 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression38 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE35_tree = default(object);
		object AND36_tree = default(object);
		object SPACE37_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(60, 72);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:2: ( andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:4: andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(61, 4);
			PushFollow(Follow._andexpression_in_orexpression269);
			andexpression34=andexpression(subquery);
			PopFollow();

			adaptor.AddChild(root_0, andexpression34.Tree);
			DebugLocation(61, 28);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:28: ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==SPACE))
				{
					int LA10_2 = input.LA(2);

					if ((LA10_2==AND))
					{
						alt10 = 1;
					}


				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:61:29: SPACE ! AND ^ SPACE ! andexpression[subquery]
					{
					DebugLocation(61, 34);
					SPACE35=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression273); 
					DebugLocation(61, 39);
					AND36=(IToken)Match(input,AND,Follow._AND_in_orexpression276); 
					AND36_tree = (object)adaptor.Create(AND36);
					root_0 = (object)adaptor.BecomeRoot(AND36_tree, root_0);
					DebugLocation(61, 46);
					SPACE37=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression279); 
					DebugLocation(61, 48);
					PushFollow(Follow._andexpression_in_orexpression282);
					andexpression38=andexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, andexpression38.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 10);
			LeaveRule("orexpression", 10);
			LeaveRule_orexpression();
		}
		DebugLocation(61, 72);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:63:1: andexpression[bool subquery] : ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) );
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression(bool subquery)
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 11);
		TraceIn("andexpression", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT39 = default(IToken);
		IToken SPACE40 = default(IToken);
		IToken char_literal41 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression42 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression44 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression46 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression48 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT39_tree = default(object);
		object SPACE40_tree = default(object);
		object char_literal41_tree = default(object);
		object char_literal43_tree = default(object);
		object char_literal45_tree = default(object);
		object char_literal47_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(63, 69);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:2: ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==NOT))
			{
				alt13 = 1;
			}
			else if (((LA13_1>=BOOL && LA13_1<=BYTE)||LA13_1==DATETIME||(LA13_1>=DOUBLE && LA13_1<=ENDSWITH)||LA13_1==GUID||LA13_1==IDENTIFIER||LA13_1==INT||LA13_1==LONG||LA13_1==SINGLE||(LA13_1>=STARTSWITH && LA13_1<=SUBSTRINGOF)||LA13_1==TOLOWER||LA13_1==56))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:4: NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(64, 7);
				NOT39=(IToken)Match(input,NOT,Follow._NOT_in_andexpression296); 
				NOT39_tree = (object)adaptor.Create(NOT39);
				root_0 = (object)adaptor.BecomeRoot(NOT39_tree, root_0);
				DebugLocation(64, 9);
				SPACE40=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression299); 
				SPACE40_tree = (object)adaptor.Create(SPACE40);
				adaptor.AddChild(root_0, SPACE40_tree);
				DebugLocation(64, 15);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:15: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==56))
				{
					alt11 = 1;
				}
				else if (((LA11_1>=BOOL && LA11_1<=BYTE)||LA11_1==DATETIME||(LA11_1>=DOUBLE && LA11_1<=ENDSWITH)||LA11_1==GUID||LA11_1==IDENTIFIER||LA11_1==INT||LA11_1==LONG||LA11_1==SINGLE||(LA11_1>=STARTSWITH && LA11_1<=SUBSTRINGOF)||LA11_1==TOLOWER))
				{
					alt11 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:16: '(' filterexpression[subquery] ')'
					{
					DebugLocation(64, 16);
					char_literal41=(IToken)Match(input,56,Follow._56_in_andexpression302); 
					char_literal41_tree = (object)adaptor.Create(char_literal41);
					adaptor.AddChild(root_0, char_literal41_tree);
					DebugLocation(64, 20);
					PushFollow(Follow._filterexpression_in_andexpression304);
					filterexpression42=filterexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, filterexpression42.Tree);
					DebugLocation(64, 47);
					char_literal43=(IToken)Match(input,57,Follow._57_in_andexpression307); 
					char_literal43_tree = (object)adaptor.Create(char_literal43);
					adaptor.AddChild(root_0, char_literal43_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:64:53: booleanexpression[subquery]
					{
					DebugLocation(64, 53);
					PushFollow(Follow._booleanexpression_in_andexpression311);
					booleanexpression44=booleanexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression44.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(65, 4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==56))
				{
					alt12 = 1;
				}
				else if (((LA12_1>=BOOL && LA12_1<=BYTE)||LA12_1==DATETIME||(LA12_1>=DOUBLE && LA12_1<=ENDSWITH)||LA12_1==GUID||LA12_1==IDENTIFIER||LA12_1==INT||LA12_1==LONG||LA12_1==SINGLE||(LA12_1>=STARTSWITH && LA12_1<=SUBSTRINGOF)||LA12_1==TOLOWER))
				{
					alt12 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:5: '(' filterexpression[subquery] ')'
					{
					DebugLocation(65, 5);
					char_literal45=(IToken)Match(input,56,Follow._56_in_andexpression319); 
					char_literal45_tree = (object)adaptor.Create(char_literal45);
					adaptor.AddChild(root_0, char_literal45_tree);
					DebugLocation(65, 9);
					PushFollow(Follow._filterexpression_in_andexpression321);
					filterexpression46=filterexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, filterexpression46.Tree);
					DebugLocation(65, 36);
					char_literal47=(IToken)Match(input,57,Follow._57_in_andexpression324); 
					char_literal47_tree = (object)adaptor.Create(char_literal47);
					adaptor.AddChild(root_0, char_literal47_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:42: booleanexpression[subquery]
					{
					DebugLocation(65, 42);
					PushFollow(Follow._booleanexpression_in_andexpression328);
					booleanexpression48=booleanexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression48.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 11);
			LeaveRule("andexpression", 11);
			LeaveRule_andexpression();
		}
		DebugLocation(65, 69);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_booleanexpression();
	partial void LeaveRule_booleanexpression();
	// $ANTLR start "booleanexpression"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:67:1: booleanexpression[bool subquery] : atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) ;
	[GrammarRule("booleanexpression")]
	private AstParserRuleReturnScope<object, IToken> booleanexpression(bool subquery)
	{
		EnterRule_booleanexpression();
		EnterRule("booleanexpression", 12);
		TraceIn("booleanexpression", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE49 = default(IToken);
		IToken SPACE50 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom2 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE49_tree = default(object);
		object SPACE50_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_NOTEQUALS=new RewriteRuleITokenStream(adaptor,"token NOTEQUALS");
		RewriteRuleITokenStream stream_GREATERTHAN=new RewriteRuleITokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleITokenStream stream_GREATERTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token GREATERTHANOREQUAL");
		RewriteRuleITokenStream stream_LESSTHAN=new RewriteRuleITokenStream(adaptor,"token LESSTHAN");
		RewriteRuleITokenStream stream_LESSTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token LESSTHANOREQUAL");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		try { DebugEnterRule(GrammarFileName, "booleanexpression");
		DebugLocation(67, 3);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:2: (atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:4: atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			{
			DebugLocation(68, 9);
			PushFollow(Follow._atom_in_booleanexpression344);
			atom1=atom(subquery);
			PopFollow();

			stream_atom.Add(atom1.Tree);
			DebugLocation(68, 25);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:25: ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==SPACE))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2==AND||LA15_2==OR))
				{
					alt15 = 2;
				}
				else if ((LA15_2==EQUALS||(LA15_2>=GREATERTHAN && LA15_2<=GREATERTHANOREQUAL)||(LA15_2>=LESSTHAN && LA15_2<=LESSTHANOREQUAL)||LA15_2==NOTEQUALS))
				{
					alt15 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA15_1==EOF||(LA15_1>=EXPAND && LA15_1<=FILTER)||LA15_1==INLINECOUNT||(LA15_1>=ORDERBY && LA15_1<=SELECT)||LA15_1==SKIP||LA15_1==TOP||LA15_1==55||LA15_1==57))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:4: SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery]
				{
				DebugLocation(69, 4);
				SPACE49=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression352);  
				stream_SPACE.Add(SPACE49);

				DebugLocation(69, 10);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:10: (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL )
				int alt14=6;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				switch (input.LA(1))
				{
				case EQUALS:
					{
					alt14 = 1;
					}
					break;
				case NOTEQUALS:
					{
					alt14 = 2;
					}
					break;
				case GREATERTHAN:
					{
					alt14 = 3;
					}
					break;
				case GREATERTHANOREQUAL:
					{
					alt14 = 4;
					}
					break;
				case LESSTHAN:
					{
					alt14 = 5;
					}
					break;
				case LESSTHANOREQUAL:
					{
					alt14 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:11: op= EQUALS
					{
					DebugLocation(69, 13);
					op=(IToken)Match(input,EQUALS,Follow._EQUALS_in_booleanexpression357);  
					stream_EQUALS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:23: op= NOTEQUALS
					{
					DebugLocation(69, 25);
					op=(IToken)Match(input,NOTEQUALS,Follow._NOTEQUALS_in_booleanexpression363);  
					stream_NOTEQUALS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:38: op= GREATERTHAN
					{
					DebugLocation(69, 40);
					op=(IToken)Match(input,GREATERTHAN,Follow._GREATERTHAN_in_booleanexpression369);  
					stream_GREATERTHAN.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:55: op= GREATERTHANOREQUAL
					{
					DebugLocation(69, 57);
					op=(IToken)Match(input,GREATERTHANOREQUAL,Follow._GREATERTHANOREQUAL_in_booleanexpression375);  
					stream_GREATERTHANOREQUAL.Add(op);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:79: op= LESSTHAN
					{
					DebugLocation(69, 81);
					op=(IToken)Match(input,LESSTHAN,Follow._LESSTHAN_in_booleanexpression381);  
					stream_LESSTHAN.Add(op);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:93: op= LESSTHANOREQUAL
					{
					DebugLocation(69, 95);
					op=(IToken)Match(input,LESSTHANOREQUAL,Follow._LESSTHANOREQUAL_in_booleanexpression387);  
					stream_LESSTHANOREQUAL.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(69, 113);
				SPACE50=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression390);  
				stream_SPACE.Add(SPACE50);

				DebugLocation(69, 124);
				PushFollow(Follow._atom_in_booleanexpression394);
				atom2=atom(subquery);
				PopFollow();

				stream_atom.Add(atom2.Tree);


				{
				// AST REWRITE
				// elements: op, atom1, atom2
				// token labels: op
				// rule labels: atom1, atom2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_atom2=new RewriteRuleSubtreeStream(adaptor,"rule atom2",atom2!=null?atom2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 70:4: -> ^( $op $atom1 $atom2)
				{
					DebugLocation(70, 7);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:70:7: ^( $op $atom1 $atom2)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(70, 10);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(70, 14);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(70, 21);
					adaptor.AddChild(root_1, stream_atom2.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:5: 
				{

				{
				// AST REWRITE
				// elements: EQUALS, atom1
				// token labels: 
				// rule labels: atom1, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 71:5: -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
				{
					DebugLocation(71, 8);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:8: ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(71, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EQUALS, "eq"), root_1);

					DebugLocation(71, 24);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(71, 30);
					adaptor.AddChild(root_1, (object)adaptor.Create(BOOL, "true"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanexpression", 12);
			LeaveRule("booleanexpression", 12);
			LeaveRule_booleanexpression();
		}
		DebugLocation(72, 3);
		} finally { DebugExitRule(GrammarFileName, "booleanexpression"); }
		return retval;

	}
	// $ANTLR end "booleanexpression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:1: atom[bool subquery] : ( functioncall[subquery] | constant | accessor[subquery] );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom(bool subquery)
	{
		EnterRule_atom();
		EnterRule("atom", 13);
		TraceIn("atom", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> functioncall51 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant52 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> accessor53 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(74, 21);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:75:2: ( functioncall[subquery] | constant | accessor[subquery] )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case ENDSWITH:
			case STARTSWITH:
			case SUBSTRINGOF:
			case TOLOWER:
				{
				alt16 = 1;
				}
				break;
			case BOOL:
			case BYTE:
			case DATETIME:
			case DOUBLE:
			case GUID:
			case INT:
			case LONG:
			case SINGLE:
			case STRING:
				{
				alt16 = 2;
				}
				break;
			case DYNAMICIDENTIFIER:
			case IDENTIFIER:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:75:4: functioncall[subquery]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(75, 4);
				PushFollow(Follow._functioncall_in_atom446);
				functioncall51=functioncall(subquery);
				PopFollow();

				adaptor.AddChild(root_0, functioncall51.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:76:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._constant_in_atom452);
				constant52=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant52.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:4: accessor[subquery]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._accessor_in_atom457);
				accessor53=accessor(subquery);
				PopFollow();

				adaptor.AddChild(root_0, accessor53.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 13);
			LeaveRule("atom", 13);
			LeaveRule_atom();
		}
		DebugLocation(77, 21);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functioncall();
	partial void LeaveRule_functioncall();
	// $ANTLR start "functioncall"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:79:1: functioncall[bool subquery] : function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')' ;
	[GrammarRule("functioncall")]
	private AstParserRuleReturnScope<object, IToken> functioncall(bool subquery)
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 14);
		TraceIn("functioncall", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal55 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken char_literal59 = default(IToken);
		AstParserRuleReturnScope<object, IToken> function54 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom56 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom58 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal55_tree = default(object);
		object char_literal57_tree = default(object);
		object char_literal59_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(79, 57);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:2: ( function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')' )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:4: function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(80, 12);
			PushFollow(Follow._function_in_functioncall469);
			function54=function();
			PopFollow();

			root_0 = (object)adaptor.BecomeRoot(function54.Tree, root_0);
			DebugLocation(80, 14);
			char_literal55=(IToken)Match(input,56,Follow._56_in_functioncall472); 
			char_literal55_tree = (object)adaptor.Create(char_literal55);
			adaptor.AddChild(root_0, char_literal55_tree);
			DebugLocation(80, 18);
			PushFollow(Follow._atom_in_functioncall474);
			atom56=atom(subquery);
			PopFollow();

			adaptor.AddChild(root_0, atom56.Tree);
			DebugLocation(80, 33);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:33: ( ',' atom[subquery] )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==58))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:80:34: ',' atom[subquery]
					{
					DebugLocation(80, 34);
					char_literal57=(IToken)Match(input,58,Follow._58_in_functioncall478); 
					char_literal57_tree = (object)adaptor.Create(char_literal57);
					adaptor.AddChild(root_0, char_literal57_tree);
					DebugLocation(80, 38);
					PushFollow(Follow._atom_in_functioncall480);
					atom58=atom(subquery);
					PopFollow();

					adaptor.AddChild(root_0, atom58.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(80, 55);
			char_literal59=(IToken)Match(input,57,Follow._57_in_functioncall485); 
			char_literal59_tree = (object)adaptor.Create(char_literal59);
			adaptor.AddChild(root_0, char_literal59_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall", 14);
			LeaveRule("functioncall", 14);
			LeaveRule_functioncall();
		}
		DebugLocation(80, 57);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return retval;

	}
	// $ANTLR end "functioncall"

	partial void EnterRule_accessor();
	partial void LeaveRule_accessor();
	// $ANTLR start "accessor"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:82:1: accessor[bool subquery] : ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )? ;
	[GrammarRule("accessor")]
	private AstParserRuleReturnScope<object, IToken> accessor(bool subquery)
	{
		EnterRule_accessor();
		EnterRule("accessor", 15);
		TraceIn("accessor", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken func = default(IToken);
		IToken id = default(IToken);
		IToken char_literal61 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal63 = default(IToken);
		IToken SPACE64 = default(IToken);
		IToken char_literal66 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname60 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression65 = default(AstParserRuleReturnScope<object, IToken>);

		object func_tree = default(object);
		object id_tree = default(object);
		object char_literal61_tree = default(object);
		object char_literal62_tree = default(object);
		object char_literal63_tree = default(object);
		object SPACE64_tree = default(object);
		object char_literal66_tree = default(object);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
		RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
		RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
		RewriteRuleITokenStream stream_MAX=new RewriteRuleITokenStream(adaptor,"token MAX");
		RewriteRuleITokenStream stream_MIN=new RewriteRuleITokenStream(adaptor,"token MIN");
		RewriteRuleITokenStream stream_SUM=new RewriteRuleITokenStream(adaptor,"token SUM");
		RewriteRuleITokenStream stream_AVERAGE=new RewriteRuleITokenStream(adaptor,"token AVERAGE");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		RewriteRuleSubtreeStream stream_filterexpression=new RewriteRuleSubtreeStream(adaptor,"rule filterexpression");
		try { DebugEnterRule(GrammarFileName, "accessor");
		DebugLocation(82, 4);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:82:24: ( ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )? )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:3: ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )?
			{
			DebugLocation(83, 3);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:3: ( propertyname[subquery] -> propertyname )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:4: propertyname[subquery]
			{
			DebugLocation(83, 4);
			PushFollow(Follow._propertyname_in_accessor497);
			propertyname60=propertyname(subquery);
			PopFollow();

			stream_propertyname.Add(propertyname60.Tree);


			{
			// AST REWRITE
			// elements: propertyname
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 83:27: -> propertyname
			{
				DebugLocation(83, 30);
				adaptor.AddChild(root_0, stream_propertyname.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(83, 44);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:44: ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==59))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:4: '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')'
				{
				DebugLocation(84, 4);
				char_literal61=(IToken)Match(input,59,Follow._59_in_accessor510);  
				stream_59.Add(char_literal61);

				DebugLocation(84, 8);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:8: (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE )
				int alt18=7;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				switch (input.LA(1))
				{
				case ANY:
					{
					alt18 = 1;
					}
					break;
				case ALL:
					{
					alt18 = 2;
					}
					break;
				case COUNT:
					{
					alt18 = 3;
					}
					break;
				case MAX:
					{
					alt18 = 4;
					}
					break;
				case MIN:
					{
					alt18 = 5;
					}
					break;
				case SUM:
					{
					alt18 = 6;
					}
					break;
				case AVERAGE:
					{
					alt18 = 7;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:9: func= ANY
					{
					DebugLocation(84, 13);
					func=(IToken)Match(input,ANY,Follow._ANY_in_accessor515);  
					stream_ANY.Add(func);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:20: func= ALL
					{
					DebugLocation(84, 24);
					func=(IToken)Match(input,ALL,Follow._ALL_in_accessor521);  
					stream_ALL.Add(func);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:31: func= COUNT
					{
					DebugLocation(84, 35);
					func=(IToken)Match(input,COUNT,Follow._COUNT_in_accessor527);  
					stream_COUNT.Add(func);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:44: func= MAX
					{
					DebugLocation(84, 48);
					func=(IToken)Match(input,MAX,Follow._MAX_in_accessor533);  
					stream_MAX.Add(func);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:55: func= MIN
					{
					DebugLocation(84, 59);
					func=(IToken)Match(input,MIN,Follow._MIN_in_accessor539);  
					stream_MIN.Add(func);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:66: func= SUM
					{
					DebugLocation(84, 70);
					func=(IToken)Match(input,SUM,Follow._SUM_in_accessor545);  
					stream_SUM.Add(func);


					}
					break;
				case 7:
					DebugEnterAlt(7);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:77: func= AVERAGE
					{
					DebugLocation(84, 81);
					func=(IToken)Match(input,AVERAGE,Follow._AVERAGE_in_accessor551);  
					stream_AVERAGE.Add(func);


					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(85, 4);
				char_literal62=(IToken)Match(input,56,Follow._56_in_accessor558);  
				stream_56.Add(char_literal62);

				DebugLocation(85, 8);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:85:8: ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) )
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==IDENTIFIER))
				{
					alt19 = 1;
				}
				else if ((LA19_1==57))
				{
					alt19 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:86:5: (id= IDENTIFIER ':' SPACE filterexpression[true] )
					{
					DebugLocation(86, 5);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:86:5: (id= IDENTIFIER ':' SPACE filterexpression[true] )
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:86:6: id= IDENTIFIER ':' SPACE filterexpression[true]
					{
					DebugLocation(86, 8);
					id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_accessor569);  
					stream_IDENTIFIER.Add(id);

					DebugLocation(86, 20);
					char_literal63=(IToken)Match(input,60,Follow._60_in_accessor571);  
					stream_60.Add(char_literal63);

					DebugLocation(86, 24);
					SPACE64=(IToken)Match(input,SPACE,Follow._SPACE_in_accessor573);  
					stream_SPACE.Add(SPACE64);

					DebugLocation(86, 30);
					PushFollow(Follow._filterexpression_in_accessor575);
					filterexpression65=filterexpression(true);
					PopFollow();

					stream_filterexpression.Add(filterexpression65.Tree);

					}



					{
					// AST REWRITE
					// elements: func, accessor, filterexpression
					// token labels: func
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_func=new RewriteRuleITokenStream(adaptor,"token func",func);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 86:54: -> ^( $func $accessor ALIAS[$id] filterexpression )
					{
						DebugLocation(86, 57);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:86:57: ^( $func $accessor ALIAS[$id] filterexpression )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(86, 60);
						root_1 = (object)adaptor.BecomeRoot(stream_func.NextNode(), root_1);

						DebugLocation(86, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(86, 75);
						adaptor.AddChild(root_1, (object)adaptor.Create(ALIAS, id));
						DebugLocation(86, 86);
						adaptor.AddChild(root_1, stream_filterexpression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:7: 
					{

					{
					// AST REWRITE
					// elements: func, accessor
					// token labels: func
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_func=new RewriteRuleITokenStream(adaptor,"token func",func);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 87:7: -> ^( $func $accessor)
					{
						DebugLocation(87, 10);
						// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:10: ^( $func $accessor)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(87, 13);
						root_1 = (object)adaptor.BecomeRoot(stream_func.NextNode(), root_1);

						DebugLocation(87, 19);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(19); }

				DebugLocation(88, 4);
				char_literal66=(IToken)Match(input,57,Follow._57_in_accessor615);  
				stream_57.Add(char_literal66);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor", 15);
			LeaveRule("accessor", 15);
			LeaveRule_accessor();
		}
		DebugLocation(89, 4);
		} finally { DebugExitRule(GrammarFileName, "accessor"); }
		return retval;

	}
	// $ANTLR end "accessor"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:91:1: function : ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER );
	[GrammarRule("function")]
	private AstParserRuleReturnScope<object, IToken> function()
	{
		EnterRule_function();
		EnterRule("function", 16);
		TraceIn("function", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set67 = default(IToken);

		object set67_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(91, 48);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:92:2: ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(92, 2);

			set67=(IToken)input.LT(1);
			if (input.LA(1)==ENDSWITH||input.LA(1)==STARTSWITH||input.LA(1)==SUBSTRINGOF||input.LA(1)==TOLOWER)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set67));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 16);
			LeaveRule("function", 16);
			LeaveRule_function();
		}
		DebugLocation(92, 48);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:94:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 17);
		TraceIn("orderby", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY68 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist69 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY68_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(94, 23);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(95, 11);
			ORDERBY68=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby654); 
			ORDERBY68_tree = (object)adaptor.Create(ORDERBY68);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY68_tree, root_0);
			DebugLocation(95, 13);
			PushFollow(Follow._orderbylist_in_orderby657);
			orderbylist69=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist69.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 17);
			LeaveRule("orderby", 17);
			LeaveRule_orderby();
		}
		DebugLocation(95, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:97:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 18);
		TraceIn("orderbylist", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname70 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname72 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal71_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(97, 46);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(98, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist667);
			orderpropertyname70=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname70.Tree);
			DebugLocation(98, 22);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==58))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:98:23: ',' ! orderpropertyname
					{
					DebugLocation(98, 26);
					char_literal71=(IToken)Match(input,58,Follow._58_in_orderbylist670); 
					DebugLocation(98, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist673);
					orderpropertyname72=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname72.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 18);
			LeaveRule("orderbylist", 18);
			LeaveRule_orderbylist();
		}
		DebugLocation(98, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:1: orderpropertyname : propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) ;
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 19);
		TraceIn("orderpropertyname", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE74 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname73 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE74_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
		RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(100, 3);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:101:2: ( propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:101:4: propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
			{
			DebugLocation(101, 4);
			PushFollow(Follow._propertyname_in_orderpropertyname684);
			propertyname73=propertyname(false);
			PopFollow();

			stream_propertyname.Add(propertyname73.Tree);
			DebugLocation(101, 24);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:101:24: ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==EOF||(LA23_1>=EXPAND && LA23_1<=FILTER)||LA23_1==INLINECOUNT||(LA23_1>=ORDERBY && LA23_1<=SELECT)||LA23_1==SKIP||LA23_1==TOP||LA23_1==55||LA23_1==58))
			{
				alt23 = 1;
			}
			else if ((LA23_1==SPACE))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:102:4: 
				{

				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 102:4: -> ^( ASC[\"asc\"] propertyname )
				{
					DebugLocation(102, 7);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:102:7: ^( ASC[\"asc\"] propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(102, 9);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "asc"), root_1);

					DebugLocation(102, 20);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:6: ( SPACE (op= ASC |op= DESC ) )
				{
				DebugLocation(103, 6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:6: ( SPACE (op= ASC |op= DESC ) )
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:7: SPACE (op= ASC |op= DESC )
				{
				DebugLocation(103, 7);
				SPACE74=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname707);  
				stream_SPACE.Add(SPACE74);

				DebugLocation(103, 13);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:13: (op= ASC |op= DESC )
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==ASC))
				{
					alt22 = 1;
				}
				else if ((LA22_1==DESC))
				{
					alt22 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:14: op= ASC
					{
					DebugLocation(103, 16);
					op=(IToken)Match(input,ASC,Follow._ASC_in_orderpropertyname712);  
					stream_ASC.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:23: op= DESC
					{
					DebugLocation(103, 25);
					op=(IToken)Match(input,DESC,Follow._DESC_in_orderpropertyname718);  
					stream_DESC.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }


				}



				{
				// AST REWRITE
				// elements: op, propertyname
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 103:33: -> ^( $op propertyname )
				{
					DebugLocation(103, 36);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:36: ^( $op propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(103, 39);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(103, 42);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 19);
			LeaveRule("orderpropertyname", 19);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(104, 3);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:1: constant : ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^) ;
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<object, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 20);
		TraceIn("constant", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INT75 = default(IToken);
		IToken BOOL76 = default(IToken);
		IToken STRING77 = default(IToken);
		IToken DATETIME78 = default(IToken);
		IToken LONG79 = default(IToken);
		IToken SINGLE80 = default(IToken);
		IToken DOUBLE81 = default(IToken);
		IToken GUID82 = default(IToken);
		IToken BYTE83 = default(IToken);

		object INT75_tree = default(object);
		object BOOL76_tree = default(object);
		object STRING77_tree = default(object);
		object DATETIME78_tree = default(object);
		object LONG79_tree = default(object);
		object SINGLE80_tree = default(object);
		object DOUBLE81_tree = default(object);
		object GUID82_tree = default(object);
		object BYTE83_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(106, 90);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:9: ( ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^)
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(106, 11);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^)
			int alt24=9;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt24 = 1;
				}
				break;
			case BOOL:
				{
				alt24 = 2;
				}
				break;
			case STRING:
				{
				alt24 = 3;
				}
				break;
			case DATETIME:
				{
				alt24 = 4;
				}
				break;
			case LONG:
				{
				alt24 = 5;
				}
				break;
			case SINGLE:
				{
				alt24 = 6;
				}
				break;
			case DOUBLE:
				{
				alt24 = 7;
				}
				break;
			case GUID:
				{
				alt24 = 8;
				}
				break;
			case BYTE:
				{
				alt24 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:12: INT ^
				{
				DebugLocation(106, 15);
				INT75=(IToken)Match(input,INT,Follow._INT_in_constant742); 
				INT75_tree = (object)adaptor.Create(INT75);
				root_0 = (object)adaptor.BecomeRoot(INT75_tree, root_0);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:19: BOOL ^
				{
				DebugLocation(106, 23);
				BOOL76=(IToken)Match(input,BOOL,Follow._BOOL_in_constant747); 
				BOOL76_tree = (object)adaptor.Create(BOOL76);
				root_0 = (object)adaptor.BecomeRoot(BOOL76_tree, root_0);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:27: STRING ^
				{
				DebugLocation(106, 33);
				STRING77=(IToken)Match(input,STRING,Follow._STRING_in_constant752); 
				STRING77_tree = (object)adaptor.Create(STRING77);
				root_0 = (object)adaptor.BecomeRoot(STRING77_tree, root_0);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:37: DATETIME ^
				{
				DebugLocation(106, 45);
				DATETIME78=(IToken)Match(input,DATETIME,Follow._DATETIME_in_constant757); 
				DATETIME78_tree = (object)adaptor.Create(DATETIME78);
				root_0 = (object)adaptor.BecomeRoot(DATETIME78_tree, root_0);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:49: LONG ^
				{
				DebugLocation(106, 53);
				LONG79=(IToken)Match(input,LONG,Follow._LONG_in_constant762); 
				LONG79_tree = (object)adaptor.Create(LONG79);
				root_0 = (object)adaptor.BecomeRoot(LONG79_tree, root_0);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:57: SINGLE ^
				{
				DebugLocation(106, 63);
				SINGLE80=(IToken)Match(input,SINGLE,Follow._SINGLE_in_constant767); 
				SINGLE80_tree = (object)adaptor.Create(SINGLE80);
				root_0 = (object)adaptor.BecomeRoot(SINGLE80_tree, root_0);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:67: DOUBLE ^
				{
				DebugLocation(106, 73);
				DOUBLE81=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_constant772); 
				DOUBLE81_tree = (object)adaptor.Create(DOUBLE81);
				root_0 = (object)adaptor.BecomeRoot(DOUBLE81_tree, root_0);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:77: GUID ^
				{
				DebugLocation(106, 81);
				GUID82=(IToken)Match(input,GUID,Follow._GUID_in_constant777); 
				GUID82_tree = (object)adaptor.Create(GUID82);
				root_0 = (object)adaptor.BecomeRoot(GUID82_tree, root_0);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:85: BYTE ^
				{
				DebugLocation(106, 89);
				BYTE83=(IToken)Match(input,BYTE,Follow._BYTE_in_constant782); 
				BYTE83_tree = (object)adaptor.Create(BYTE83);
				root_0 = (object)adaptor.BecomeRoot(BYTE83_tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 20);
			LeaveRule("constant", 20);
			LeaveRule_constant();
		}
		DebugLocation(106, 90);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:108:1: propertyname[bool subquery] : ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )? ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname(bool subquery)
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 21);
		TraceIn("propertyname", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal85 = default(IToken);
		AstParserRuleReturnScope<object, IToken> next = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifierpart84 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal85_tree = default(object);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleSubtreeStream stream_identifierpart=new RewriteRuleSubtreeStream(adaptor,"rule identifierpart");
		RewriteRuleSubtreeStream stream_subpropertyname=new RewriteRuleSubtreeStream(adaptor,"rule subpropertyname");
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(108, 108);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:2: ( ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )? )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:4: ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )?
			{
			DebugLocation(109, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:4: ( identifierpart[subquery] -> identifierpart )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:5: identifierpart[subquery]
			{
			DebugLocation(109, 5);
			PushFollow(Follow._identifierpart_in_propertyname795);
			identifierpart84=identifierpart(subquery);
			PopFollow();

			stream_identifierpart.Add(identifierpart84.Tree);


			{
			// AST REWRITE
			// elements: identifierpart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 109:30: -> identifierpart
			{
				DebugLocation(109, 33);
				adaptor.AddChild(root_0, stream_identifierpart.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(109, 49);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:49: ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==59))
			{
				int LA25_2 = input.LA(2);

				if ((LA25_2==DYNAMICIDENTIFIER||LA25_2==IDENTIFIER))
				{
					alt25 = 1;
				}
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:50: '/' next= subpropertyname[false]
				{
				DebugLocation(109, 50);
				char_literal85=(IToken)Match(input,59,Follow._59_in_propertyname804);  
				stream_59.Add(char_literal85);

				DebugLocation(109, 58);
				PushFollow(Follow._subpropertyname_in_propertyname808);
				next=subpropertyname(false);
				PopFollow();

				stream_subpropertyname.Add(next.Tree);


				{
				// AST REWRITE
				// elements: propertyname, next
				// token labels: 
				// rule labels: next, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_next=new RewriteRuleSubtreeStream(adaptor,"rule next",next!=null?next.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 109:82: -> ^( $propertyname $next)
				{
					DebugLocation(109, 85);
					// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:85: ^( $propertyname $next)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(109, 88);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(109, 102);
					adaptor.AddChild(root_1, stream_next.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 21);
			LeaveRule("propertyname", 21);
			LeaveRule_propertyname();
		}
		DebugLocation(109, 108);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"

	partial void EnterRule_subpropertyname();
	partial void LeaveRule_subpropertyname();
	// $ANTLR start "subpropertyname"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:111:1: subpropertyname[bool subquery] : propertyname[false] ;
	[GrammarRule("subpropertyname")]
	private AstParserRuleReturnScope<object, IToken> subpropertyname(bool subquery)
	{
		EnterRule_subpropertyname();
		EnterRule("subpropertyname", 22);
		TraceIn("subpropertyname", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> propertyname86 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "subpropertyname");
		DebugLocation(111, 22);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:2: ( propertyname[false] )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:4: propertyname[false]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(112, 4);
			PushFollow(Follow._propertyname_in_subpropertyname831);
			propertyname86=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname86.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subpropertyname", 22);
			LeaveRule("subpropertyname", 22);
			LeaveRule_subpropertyname();
		}
		DebugLocation(112, 22);
		} finally { DebugExitRule(GrammarFileName, "subpropertyname"); }
		return retval;

	}
	// $ANTLR end "subpropertyname"

	partial void EnterRule_identifierpart();
	partial void LeaveRule_identifierpart();
	// $ANTLR start "identifierpart"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:114:1: identifierpart[bool subquery] : (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER ) ;
	[GrammarRule("identifierpart")]
	private AstParserRuleReturnScope<object, IToken> identifierpart(bool subquery)
	{
		EnterRule_identifierpart();
		EnterRule("identifierpart", 23);
		TraceIn("identifierpart", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken DYNAMICIDENTIFIER87 = default(IToken);

		object id_tree = default(object);
		object DYNAMICIDENTIFIER87_tree = default(object);
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_DYNAMICIDENTIFIER=new RewriteRuleITokenStream(adaptor,"token DYNAMICIDENTIFIER");
		try { DebugEnterRule(GrammarFileName, "identifierpart");
		DebugLocation(114, 43);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:115:2: ( (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER ) )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:115:4: (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER )
			{
			DebugLocation(115, 4);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:115:4: (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER )
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==IDENTIFIER))
			{
				alt26 = 1;
			}
			else if ((LA26_1==DYNAMICIDENTIFIER))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:115:5: id= IDENTIFIER
				{
				DebugLocation(115, 7);
				id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierpart846);  
				stream_IDENTIFIER.Add(id);



				{
				// AST REWRITE
				// elements: IDENTIFIER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 115:19: -> {subquery}? ALIAS[$id]
				if (subquery)
				{
					DebugLocation(115, 34);
					adaptor.AddChild(root_0, (object)adaptor.Create(ALIAS, id));

				}
				else // 116:5: -> IDENTIFIER[$id]
				{
					DebugLocation(116, 8);
					adaptor.AddChild(root_0, (object)adaptor.Create(IDENTIFIER, id));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:117:5: DYNAMICIDENTIFIER
				{
				DebugLocation(117, 5);
				DYNAMICIDENTIFIER87=(IToken)Match(input,DYNAMICIDENTIFIER,Follow._DYNAMICIDENTIFIER_in_identifierpart868);  
				stream_DYNAMICIDENTIFIER.Add(DYNAMICIDENTIFIER87);



				{
				// AST REWRITE
				// elements: DYNAMICIDENTIFIER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 117:23: -> DYNAMICIDENTIFIER
				{
					DebugLocation(117, 26);
					adaptor.AddChild(root_0, stream_DYNAMICIDENTIFIER.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifierpart", 23);
			LeaveRule("identifierpart", 23);
			LeaveRule_identifierpart();
		}
		DebugLocation(117, 43);
		} finally { DebugExitRule(GrammarFileName, "identifierpart"); }
		return retval;

	}
	// $ANTLR end "identifierpart"

	partial void EnterRule_filteroperator();
	partial void LeaveRule_filteroperator();
	// $ANTLR start "filteroperator"
	// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:119:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
	[GrammarRule("filteroperator")]
	private AstParserRuleReturnScope<object, IToken> filteroperator()
	{
		EnterRule_filteroperator();
		EnterRule("filteroperator", 24);
		TraceIn("filteroperator", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set88 = default(IToken);

		object set88_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filteroperator");
		DebugLocation(119, 85);
		try
		{
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:120:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
			DebugEnterAlt(1);
			// D:\\Code\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(120, 2);

			set88=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANOREQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANOREQUAL)||input.LA(1)==NOTEQUALS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set88));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filteroperator", 24);
			LeaveRule("filteroperator", 24);
			LeaveRule_filteroperator();
		}
		DebugLocation(120, 85);
		} finally { DebugExitRule(GrammarFileName, "filteroperator"); }
		return retval;

	}
	// $ANTLR end "filteroperator"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog76 = new BitSet(new ulong[]{0xA0580040C00002UL});
		public static readonly BitSet _55_in_prog79 = new BitSet(new ulong[]{0x20580040C00000UL});
		public static readonly BitSet _param_in_prog82 = new BitSet(new ulong[]{0xA0580040C00002UL});
		public static readonly BitSet _orderby_in_param95 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param99 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_param111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inlinecount_in_param115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expand_in_param119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip130 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _INT_in_skip133 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _TOP_in_top144 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _INT_in_top147 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _FILTER_in_filter158 = new BitSet(new ulong[]{0x1172084A40EB000UL});
		public static readonly BitSet _filterexpression_in_filter161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select172 = new BitSet(new ulong[]{0x20040000UL});
		public static readonly BitSet _propertyname_in_select175 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_select179 = new BitSet(new ulong[]{0x20040000UL});
		public static readonly BitSet _propertyname_in_select182 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _EXPAND_in_expand197 = new BitSet(new ulong[]{0x20040000UL});
		public static readonly BitSet _propertyname_in_expand200 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_expand204 = new BitSet(new ulong[]{0x20040000UL});
		public static readonly BitSet _propertyname_in_expand207 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount220 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ALLPAGES_in_inlinecount223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount228 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _NONE_in_inlinecount230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orexpression_in_filterexpression242 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _SPACE_in_filterexpression246 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _OR_in_filterexpression249 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _SPACE_in_filterexpression252 = new BitSet(new ulong[]{0x1172084A40EB000UL});
		public static readonly BitSet _orexpression_in_filterexpression255 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _andexpression_in_orexpression269 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _SPACE_in_orexpression273 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _AND_in_orexpression276 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _SPACE_in_orexpression279 = new BitSet(new ulong[]{0x1172084A40EB000UL});
		public static readonly BitSet _andexpression_in_orexpression282 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _NOT_in_andexpression296 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _SPACE_in_andexpression299 = new BitSet(new ulong[]{0x1172004A40EB000UL});
		public static readonly BitSet _56_in_andexpression302 = new BitSet(new ulong[]{0x1172084A40EB000UL});
		public static readonly BitSet _filterexpression_in_andexpression304 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_andexpression307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_andexpression319 = new BitSet(new ulong[]{0x1172084A40EB000UL});
		public static readonly BitSet _filterexpression_in_andexpression321 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_andexpression324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_booleanexpression344 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _SPACE_in_booleanexpression352 = new BitSet(new ulong[]{0x10303100000UL});
		public static readonly BitSet _EQUALS_in_booleanexpression357 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _NOTEQUALS_in_booleanexpression363 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _GREATERTHAN_in_booleanexpression369 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _GREATERTHANOREQUAL_in_booleanexpression375 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _LESSTHAN_in_booleanexpression381 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _LESSTHANOREQUAL_in_booleanexpression387 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _SPACE_in_booleanexpression390 = new BitSet(new ulong[]{0x172004A40EB000UL});
		public static readonly BitSet _atom_in_booleanexpression394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_atom446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_atom452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_in_atom457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_functioncall469 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_functioncall472 = new BitSet(new ulong[]{0x172004A40EB000UL});
		public static readonly BitSet _atom_in_functioncall474 = new BitSet(new ulong[]{0x600000000000000UL});
		public static readonly BitSet _58_in_functioncall478 = new BitSet(new ulong[]{0x172004A40EB000UL});
		public static readonly BitSet _atom_in_functioncall480 = new BitSet(new ulong[]{0x600000000000000UL});
		public static readonly BitSet _57_in_functioncall485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_accessor497 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _59_in_accessor510 = new BitSet(new ulong[]{0x8001800004920UL});
		public static readonly BitSet _ANY_in_accessor515 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _ALL_in_accessor521 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _COUNT_in_accessor527 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _MAX_in_accessor533 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _MIN_in_accessor539 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _SUM_in_accessor545 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _AVERAGE_in_accessor551 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_accessor558 = new BitSet(new ulong[]{0x200000020000000UL});
		public static readonly BitSet _IDENTIFIER_in_accessor569 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_accessor571 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _SPACE_in_accessor573 = new BitSet(new ulong[]{0x1172084A40EB000UL});
		public static readonly BitSet _filterexpression_in_accessor575 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_accessor615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby654 = new BitSet(new ulong[]{0x20040000UL});
		public static readonly BitSet _orderbylist_in_orderby657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist667 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_orderbylist670 = new BitSet(new ulong[]{0x20040000UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist673 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _propertyname_in_orderpropertyname684 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _SPACE_in_orderpropertyname707 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _ASC_in_orderpropertyname712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderpropertyname718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_constant742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOL_in_constant747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_constant752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_constant757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LONG_in_constant762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SINGLE_in_constant767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_constant772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GUID_in_constant777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BYTE_in_constant782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierpart_in_propertyname795 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _59_in_propertyname804 = new BitSet(new ulong[]{0x20040000UL});
		public static readonly BitSet _subpropertyname_in_propertyname808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_subpropertyname831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_identifierpart846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DYNAMICIDENTIFIER_in_identifierpart868 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
